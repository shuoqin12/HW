---
title: "STATS 506 HW2"
format: html
editor: visual
embed-resources: true
code-fold: true
---

Github Link: 

```{r}
library(roxygen2)
```

## Problem 1

### (a)

#### version 1

```{r}
#' Return the result of playing a dice game using loops
#'
#' @param num_dice number of dice to roll
#'
#' @return total winnings or loses

play_dice1 <- function(num_dice){
  result <- 0
  for (i in 1:num_dice) {
    roll <- sample(1:6, 1, replace = TRUE)
    if(roll%%2==0){
      result <- result + roll-2
    }
    else{
      result <- result - 2
    }
  }
    return(result)
}
```

#### version 2

```{r}
#' Return the result of playing a dice game using build in R vectorized functions
#'
#' @param num_dice number of dice to roll
#'
#' @return total winnings or loses

play_dice2 <- function(num_dice){
  roll <- sample(1:6, num_dice, replace = TRUE)
  score <- ifelse(roll%%2==0, roll-2, -2)
  result <- sum(score)
  return(result)
}

```

#### version 3

```{r}
#' Return the result of playing a dice game using table()
#'
#' @param num_dice number of dice to roll
#'
#' @return total winnings or loses

play_dice3 <- function(num_dice){
  roll <- sample(1:6, num_dice, replace = TRUE)
  score <- table(roll)
  result <- 0
  for (i in 1:length(score)) {
    
    if(as.numeric(names(score)[i] == 'NA')){
      next
    }
    
    if(as.numeric(names(score)[i]) %% 2==0){
      result <- result + as.numeric(names(score)[i])*score[[i]]-2*score[[i]]
    }
    
    else{
      result <- result -2*score[[i]]
    }
    
}
  return(result)
}

play_dice3(15)
```

#### version 4

```{r}
#' Return the result of playing a dice game using apply function
#'
#' @param num_dice number of dice to roll
#'
#' @return total winnings or loses

play_dice4 <- function(num_dice){
   roll <- list(sample(1:6, num_dice, replace = TRUE))
   result <- sapply(roll, function(roll){
     ifelse(roll %% 2 ==0, roll-2, -2)
   })
   return(sum(result))
}
```

### (b)

```{r}
play_dice1(3)
play_dice1(3000)

play_dice2(3)
play_dice2(3000)

play_dice3(3)
play_dice3(3000)

play_dice4(3)
play_dice4(3000)

```

### (c)
```{r}
set.seed(100)
play_dice1(3)

set.seed(100)
play_dice1(3000)

set.seed(100)
play_dice2(3)

set.seed(100)
play_dice2(3000)

set.seed(100)
play_dice3(3)

set.seed(100)
play_dice3(3000)

set.seed(100)
play_dice4(3)

set.seed(100)
play_dice4(3000)

```


### (d)
```{r}
library(microbenchmark)

##version 1
n1 <- 100
microbenchmark(play_dice1(n1), play_dice2(n1), play_dice3(n1), play_dice4(n1))

n2 <- 10000
microbenchmark(play_dice1(n2), play_dice2(n2), play_dice3(n2), play_dice4(n2))
```

For low inputs(n=100), it looks like version 2 using built-in R vectorized functions is the fastest with a mean 40.8 and version 1 is the slowest using loops with a mean of 939.7. Version 4 is a bit slower but not too much of difference comparing to version 2. Version 3 is the 3rd fastest. For high inputs(n=10000), version 2 is still the fastest and version 1 is the slowest and there's a huge difference in between. There's not too much difference between version 2, 3, and 4.

### (e)
```{r}
#' Estimate the expected value of income in this dice game
#'
#' @param n number of rounds you play
#'
#' @return income

estimateincome <- function(n){
  roll <- sample(1:6, n, replace = TRUE)
  score <- ifelse(roll%%2==0, roll-2, -2)
  result <- sum(score)
  return(result)
}

reps <- 1000
n2 <- vector(length = reps)
for (i in seq_len(reps)) {
  n2[i] <- estimateincome(5)
}
n4 <- vector(length = reps)
for (i in seq_len(reps)) {
  n4[i] <- estimateincome(50)
}
n6 <- vector(length = reps)
for (i in seq_len(reps)) {
  n6[i] <- estimateincome(500)
}

boxplot(data.frame(n2, n4, n6))
abline(h = pi, col = "red")
```

I think this is a fair game. Based on the boxplot, we see that the estimation is around 0. From probability wise the income should be 0 and from the boxplot above we see that they are close to 0 too.

## Problem 2

### (a)

```{r}
cars <- read.csv("~/Desktop/cars.csv")
names(cars) <- c("height", "length", "width", "driveline", "enginetype", "hybrid", "num_forwardgears", "transmission", "citympg", "fueltype", "highwaympg", "classification", "id", "make", "modelyear", "year","horsepower", "torque")
```

### (b)

```{r}
new_cars <- cars[cars$fueltype == "Gasoline",]
```

### (c)

```{r}
new_cars$year <- as.factor(new_cars$year)
mod <- lm(highwaympg ~ horsepower + torque + height + length + width + year, data = new_cars)
summary(mod)
```

Based on the summary, the estimated regression equation is MPG = 32.29 + 0.016*horsepower while holding others constant. We except highway mpg to increase by 0.0163556 miles-per-gallon when horsepower increase 1 unit of power(745.7 watts) while others are held constant.


### (d)
```{r}
library(emmeans)
mod2 <- lm(highwaympg ~ horsepower * torque + height + length + width + year, data = new_cars)
summary(mod2)
emmip(mod2, torque ~ horsepower, at = list(horsepower = c(200, 400, 600), torque = c(200, 400, 600)))


library(interactions)
interact_plot(mod2, pred = horsepower, modx = torque, modx.values = c(200, 400, 600), at = list(year = as.factor(2012)))
```

### (e)
```{r}
Y = new_cars$highwaympg
X = cbind(1,new_cars$horsepower,new_cars$torque, new_cars$height, new_cars$length, new_cars$width, new_cars$year)
Xt = t(X)
beta = solve(Xt%*%X)%*%Xt%*%Y
print(t(beta))
```


## Problem 3

### (a)
```stata
 import delimited "K:\cars 3.csv", clear 
(encoding automatically selected: ISO-8859-1)
(18 vars, 5,076 obs)

.  rename dimensionsheight height

.  rename dimensionslength length

.  rename dimensionswidth width

.  rename engineinformationdriveline drive

.  rename engineinformationenginetype enginetype

.  rename engineinformationhybrid hybrid

.  rename engineinformationnumberofforward num_forwardgears

.  rename engineinformationtransmission transmission

.  rename fuelinformationcitympg citympg

.  rename fuelinformationfueltype fueltype

.  rename fuelinformationhighwaympg highwaympg

.  rename identificationclassification classification

.  rename identificationid id

.  rename identificationmake make

.  rename identificationmodelyear modelyear

.  rename identificationyear year

.  rename engineinformationenginestatistic horsepower

.  rename v18 torque

```

### (b)
```stata

 drop if fueltype != Gasoline
 
```
 
 
### (c)
```stata

 regress highwaympg c.horsepower c.torque c.height c.length c.width i.year
 
 ```
 
 to produce
 
 ```stata
  regress highwaympg horsepower torque height length width i.year

      Source |       SS           df       MS      Number of obs   =     5,076
-------------+----------------------------------   F(8, 5067)      =    457.10
       Model |  89554.9726         8  11194.3716   Prob > F        =    0.0000
    Residual |  124092.089     5,067  24.4902484   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4183
       Total |  213647.061     5,075  42.0979431   Root MSE        =    4.9488

------------------------------------------------------------------------------
  highwaympg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |    .012399   .0022022     5.63   0.000     .0080818    .0167163
      torque |  -.0489951   .0021197   -23.11   0.000    -.0531506   -.0448397
      height |   .0125702   .0011671    10.77   0.000     .0102823    .0148582
      length |   .0003739   .0009016     0.41   0.678    -.0013937    .0021415
       width |  -.0040653   .0009338    -4.35   0.000    -.0058959   -.0022347
             |
        year |
       2010  |  -1.106441   .7191344    -1.54   0.124    -2.516255     .303373
       2011  |  -.6576652   .7178825    -0.92   0.360    -2.065025    .7496948
       2012  |   .5663031   .7235105     0.78   0.434    -.8520902    1.984696
             |
       _cons |   33.35644   .7667336    43.50   0.000     31.85331    34.85957
------------------------------------------------------------------------------
```

Based on the summary, the estimated regression equation is MPG = 32.29 + 0.016*horsepower while holding others constant. We except highway mpg to increase by 0.0163556 miles-per-gallon when horsepower increase 1 unit of power(745.7 watts) while others are held constant.

 
### (d)

```stata
 regress highwaympg c.horsepower##c.torque i.year c.height c.length c.width  
 margins, at(horsepower  = (200 400 600) torque = (200 400 600))
 marginsplot 
 ```
 
 to Produce
 
 ```stata
 regress highwaympg c.horsepower##c.torque i.year c.height c.length c.width  

      Source |       SS           df       MS      Number of obs   =     5,076
-------------+----------------------------------   F(9, 5066)      =    540.62
       Model |  104667.712         9  11629.7458   Prob > F        =    0.0000
    Residual |  108979.349     5,066  21.5119126   R-squared       =    0.4899
-------------+----------------------------------   Adj R-squared   =    0.4890
       Total |  213647.061     5,075  42.0979431   Root MSE        =    4.6381

---------------------------------------------------------------------------------------
           highwaympg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
----------------------+----------------------------------------------------------------
           horsepower |  -.0280347   .0025665   -10.92   0.000    -.0330662   -.0230032
               torque |  -.0856905   .0024214   -35.39   0.000    -.0904375   -.0809434
                      |
c.horsepower#c.torque |   .0001268   4.78e-06    26.51   0.000     .0001174    .0001362
                      |
                 year |
                2010  |  -1.235231   .6740067    -1.83   0.067    -2.556576    .0861134
                2011  |  -.7472834   .6728245    -1.11   0.267     -2.06631    .5717434
                2012  |   .4411436   .6781071     0.65   0.515    -.8882395    1.770527
                      |
               height |   .0088124   .0011029     7.99   0.000     .0066502    .0109746
               length |   .0005317   .0008451     0.63   0.529     -.001125    .0021884
                width |  -.0047471   .0008755    -5.42   0.000    -.0064635   -.0030307
                _cons |    44.5486   .8334814    53.45   0.000     42.91461    46.18258
---------------------------------------------------------------------------------------

.  margins, at(horsepower  = (200 400 600) torque = (200 400 600))

Predictive margins                                       Number of obs = 5,076
Model VCE: OLS

Expression: Linear prediction, predict()
1._at: horsepower = 200
       torque     = 200
2._at: horsepower = 200
       torque     = 400
3._at: horsepower = 200
       torque     = 600
4._at: horsepower = 400
       torque     = 200
5._at: horsepower = 400
       torque     = 400
6._at: horsepower = 400
       torque     = 600
7._at: horsepower = 600
       torque     = 200
8._at: horsepower = 600
       torque     = 400
9._at: horsepower = 600
       torque     = 600

------------------------------------------------------------------------------
             |            Delta-method
             |     Margin   std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
         _at |
          1  |   26.91565    .081787   329.09   0.000     26.75531    27.07598
          2  |   14.84953   .4066432    36.52   0.000     14.05233    15.64672
          3  |   2.783409   .8089405     3.44   0.001     1.197536    4.369282
          4  |   26.38068   .4258601    61.95   0.000     25.54581    27.21555
          5  |   19.38653   .1108762   174.85   0.000     19.16917     19.6039
          6  |   12.39239   .4258546    29.10   0.000     11.55753    13.22725
          7  |   25.84571   .8501115    30.40   0.000     24.17912    27.51229
          8  |   23.92354   .4605071    51.95   0.000     23.02074    24.82633
          9  |   22.00137   .4402291    49.98   0.000     21.13833    22.86441
------------------------------------------------------------------------------

.  marginsplot 

Variables that uniquely identify margins: horsepower torque

. 
end of do-file

. graph save "Graph" "K:\Graph.gph"
file K:\Graph.gph saved

graph attached on canvas
```


